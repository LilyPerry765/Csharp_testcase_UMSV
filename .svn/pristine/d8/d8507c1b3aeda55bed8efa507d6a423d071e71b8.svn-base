//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.208
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright 2008, Tenta Corporation, Version 1.5
namespace UMSV {
    using System;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    using System.IO;
    
    
    public partial class ReportSchemaUtility {
        
        public const string SchemaNamespace = "http://tempuri.org/ReportSchema.xsd";
        
        public static string Serialize<T>(object o, bool indented)
         {
            StringWriter writer = new StringWriter();
            XmlTextWriter xmlWriter = new XmlTextWriter(writer);
            if (indented) {
                xmlWriter.Formatting = Formatting.Indented;
            }
            else {
                xmlWriter.Formatting = Formatting.None;
            }
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            serializer.Serialize(xmlWriter, o);
            return writer.ToString();
        }
        
        public static T Deserialize<T>(string objectXml)
         {
            StringReader reader = new StringReader(objectXml);
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            T classObject = ((T)(serializer.Deserialize(reader)));
            reader.Close();
            return classObject;
        }
        
        public static T DeserializeFile<T>(string path)
         {
            string xml = File.ReadAllText(path);
            return ReportSchemaUtility.Deserialize<T>(xml);
        }
    }
    
    [Serializable()]
    public enum ReportType {
        
        Global,
        
        DailyActivity,
        
        OperatorsActivityCompare,
        
        TalkSummaryReport,
        
        OperatorAvailability,
        
        TrafficOveral,
        
        TalksInHour,
        
        OperatorTalksInHour,
        
        OperatorsCountInHour,
        
        CallsFromPrefix,
        
        ChannelsDailyTraffic,
    }
    
    [Serializable()]
    public enum ChartType {
        
        Line,
        
        Column,
        
        Bar,
    }
    
    [Serializable()]
    public enum CallType {
        
        Unspecified,
        
        FromClient,
        
        FromGateway,
        
        ToClient,
        
        ToGateway,
    }
    
    [Serializable()]
    public enum PredefinedTime {
        
        Null,
        
        Hidden,
        
        Yesterday,
        
        OneWeekAgo,
        
        Today,
        
        Now,
        
        FirstDayOfMonth,
        
        FirstDayOfLastMonth,
    }
    
    [Serializable()]
    [XmlRoot(ElementName="ReportSchema", Namespace=ReportSchemaUtility.SchemaNamespace, IsNullable=false)]
    public partial class ReportSchema : INotifyPropertyChanged {
        
        [XmlElement(ElementName="Report")]
        public List<ReportSchemaReport> _Reports;
        
        public const string ReportsProperty = "Reports";
        
        [XmlIgnore()]
        public List<ReportSchemaReport> Reports {
            get {
                if ((_Reports == null)) {
                    _Reports = new List<ReportSchemaReport>();
                }
                return _Reports;
            }
            set {
                if ((_Reports != value)) {
                    this._Reports = value;
                    this.SendPropertyChanged("Reports");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanged(string propertyName) {
            if ((PropertyChanged != null)) {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [Serializable()]
    [XmlType(TypeName="ReportSchemaReport", Namespace=ReportSchemaUtility.SchemaNamespace)]
    public partial class ReportSchemaReport : INotifyPropertyChanged {
        
        [XmlElement(ElementName="Column")]
        public List<ReportSchemaReportColumn> _Columns;
        
        public const string ColumnsProperty = "Columns";
        
        [XmlAttribute(AttributeName="ID")]
        public int _ID;
        
        public const string IDProperty = "ID";
        
        [XmlAttribute(AttributeName="Title")]
        public string _Title;
        
        public const string TitleProperty = "Title";
        
        [XmlAttribute(AttributeName="Help")]
        public string _Help;
        
        public const string HelpProperty = "Help";
        
        [XmlAttribute(AttributeName="Type")]
        public ReportType _Type = ReportType.Global;
        
        public const string TypeProperty = "Type";
        
        [XmlAttribute(AttributeName="IsChart")]
        public bool _IsChart = false;
        
        public const string IsChartProperty = "IsChart";
        
        [XmlAttribute(AttributeName="CallerIDVisible")]
        public bool _CallerIDVisible = false;
        
        public const string CallerIDVisibleProperty = "CallerIDVisible";
        
        [XmlAttribute(AttributeName="OperatorVisible")]
        public bool _OperatorVisible = true;
        
        public const string OperatorVisibleProperty = "OperatorVisible";
        
        [XmlAttribute(AttributeName="ChartType")]
        public ChartType _ChartType = ChartType.Bar;
        
        public const string ChartTypeProperty = "ChartType";
        
        [XmlAttribute(AttributeName="xProperty")]
        public string _xProperty = "X";
        
        public const string xPropertyProperty = "xProperty";
        
        [XmlAttribute(AttributeName="yProperty")]
        public string _yProperty = "Y";
        
        public const string yPropertyProperty = "yProperty";
        
        [XmlAttribute(AttributeName="ToTimeState")]
        public PredefinedTime _ToTimeState = PredefinedTime.Null;
        
        public const string ToTimeStateProperty = "ToTimeState";
        
        [XmlAttribute(AttributeName="FromTimeState")]
        public PredefinedTime _FromTimeState = PredefinedTime.Null;
        
        public const string FromTimeStateProperty = "FromTimeState";
        
        [XmlAttribute(AttributeName="CallType")]
        public CallType _CallType;
        
        public const string CallTypeProperty = "CallType";
        
        [XmlIgnore()]
        public List<ReportSchemaReportColumn> Columns {
            get {
                if ((_Columns == null)) {
                    _Columns = new List<ReportSchemaReportColumn>();
                }
                return _Columns;
            }
            set {
                if ((_Columns != value)) {
                    this._Columns = value;
                    this.SendPropertyChanged("Columns");
                }
            }
        }
        
        [XmlIgnore()]
        public int ID {
            get {
                return this._ID;
            }
            set {
                if ((_ID != value)) {
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                }
            }
        }
        
        [XmlIgnore()]
        public string Title {
            get {
                return this._Title;
            }
            set {
                if ((_Title != value)) {
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                }
            }
        }
        
        [XmlIgnore()]
        public string Help {
            get {
                return this._Help;
            }
            set {
                if ((_Help != value)) {
                    this._Help = value;
                    this.SendPropertyChanged("Help");
                }
            }
        }
        
        [XmlIgnore()]
        public ReportType Type {
            get {
                return this._Type;
            }
            set {
                if ((_Type != value)) {
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                }
            }
        }
        
        [XmlIgnore()]
        public bool IsChart {
            get {
                return this._IsChart;
            }
            set {
                if ((_IsChart != value)) {
                    this._IsChart = value;
                    this.SendPropertyChanged("IsChart");
                }
            }
        }
        
        [XmlIgnore()]
        public bool CallerIDVisible {
            get {
                return this._CallerIDVisible;
            }
            set {
                if ((_CallerIDVisible != value)) {
                    this._CallerIDVisible = value;
                    this.SendPropertyChanged("CallerIDVisible");
                }
            }
        }
        
        [XmlIgnore()]
        public bool OperatorVisible {
            get {
                return this._OperatorVisible;
            }
            set {
                if ((_OperatorVisible != value)) {
                    this._OperatorVisible = value;
                    this.SendPropertyChanged("OperatorVisible");
                }
            }
        }
        
        [XmlIgnore()]
        public ChartType ChartType {
            get {
                return this._ChartType;
            }
            set {
                if ((_ChartType != value)) {
                    this._ChartType = value;
                    this.SendPropertyChanged("ChartType");
                }
            }
        }
        
        [XmlIgnore()]
        public string xProperty {
            get {
                return this._xProperty;
            }
            set {
                if ((_xProperty != value)) {
                    this._xProperty = value;
                    this.SendPropertyChanged("xProperty");
                }
            }
        }
        
        [XmlIgnore()]
        public string yProperty {
            get {
                return this._yProperty;
            }
            set {
                if ((_yProperty != value)) {
                    this._yProperty = value;
                    this.SendPropertyChanged("yProperty");
                }
            }
        }
        
        [XmlIgnore()]
        public PredefinedTime ToTimeState {
            get {
                return this._ToTimeState;
            }
            set {
                if ((_ToTimeState != value)) {
                    this._ToTimeState = value;
                    this.SendPropertyChanged("ToTimeState");
                }
            }
        }
        
        [XmlIgnore()]
        public PredefinedTime FromTimeState {
            get {
                return this._FromTimeState;
            }
            set {
                if ((_FromTimeState != value)) {
                    this._FromTimeState = value;
                    this.SendPropertyChanged("FromTimeState");
                }
            }
        }
        
        [XmlIgnore()]
        public CallType CallType {
            get {
                return this._CallType;
            }
            set {
                if ((_CallType != value)) {
                    this._CallType = value;
                    this.SendPropertyChanged("CallType");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanged(string propertyName) {
            if ((PropertyChanged != null)) {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [Serializable()]
    [XmlType(TypeName="ReportSchemaReportColumn", Namespace=ReportSchemaUtility.SchemaNamespace)]
    public partial class ReportSchemaReportColumn : INotifyPropertyChanged {
        
        [XmlAttribute(AttributeName="Title")]
        public string _Title;
        
        public const string TitleProperty = "Title";
        
        [XmlAttribute(AttributeName="PropertyName")]
        public string _PropertyName;
        
        public const string PropertyNameProperty = "PropertyName";
        
        [XmlIgnore()]
        public string Title {
            get {
                return this._Title;
            }
            set {
                if ((_Title != value)) {
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                }
            }
        }
        
        [XmlIgnore()]
        public string PropertyName {
            get {
                return this._PropertyName;
            }
            set {
                if ((_PropertyName != value)) {
                    this._PropertyName = value;
                    this.SendPropertyChanged("PropertyName");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanged(string propertyName) {
            if ((PropertyChanged != null)) {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
