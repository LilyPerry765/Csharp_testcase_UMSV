//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright 2008, Tenta Corporation, Version 1.5
namespace UMSV.Schema {
    using System;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    using System.IO;
    
    
    public partial class ScheduleUtility {
        
        public const string SchemaNamespace = "http://tempuri.org/Informing.xsd";

        public static T DeserializeInforming<T>(string xmlString)
        {
            using (StringReader reader = new StringReader(xmlString))
            {
                XmlSerializer serializer = new XmlSerializer(typeof(T));
                return (T)serializer.Deserialize(reader);
            }
        }

        public static string SerializeInforming<T>(T obj)
        {
            StringWriter writer = new StringWriter();
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            serializer.Serialize(writer, obj);
            return writer.ToString();
        }


        public static string Serialize<T>(object o, bool indented)
         {
            StringWriter writer = new StringWriter();
            XmlTextWriter xmlWriter = new XmlTextWriter(writer);
            if (indented) {
                xmlWriter.Formatting = Formatting.Indented;
            }
            else {
                xmlWriter.Formatting = Formatting.None;
            }
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            serializer.Serialize(xmlWriter, o);
            return writer.ToString();
        }
        
        public static T Deserialize<T>(string objectXml)
         {
            StringReader reader = new StringReader(objectXml);
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            T classObject = ((T)(serializer.Deserialize(reader)));
            reader.Close();
            return classObject;
        }
        
        public static T DeserializeFile<T>(string path)
         {
            string xml = File.ReadAllText(path);
            return ScheduleUtility.Deserialize<T>(xml);
        }
    }
    
    [Serializable()]
    [XmlRoot(ElementName="Schedule", Namespace=ScheduleUtility.SchemaNamespace, IsNullable=false)]
    public partial class Schedule : INotifyPropertyChanged {
        
        [XmlElement(ElementName="Time")]
        public List<ScheduleTime> _Times;
        
        public const string TimesProperty = "Times";
        
        [XmlAttribute(AttributeName="Priodic")]
        public bool _Priodic = false;
        
        public const string PriodicProperty = "Priodic";
        
        [XmlIgnore()]
        public List<ScheduleTime> Times {
            get {
                if ((_Times == null)) {
                    _Times = new List<ScheduleTime>();
                }
                return _Times;
            }
            set {
                if ((_Times != value)) {
                    this._Times = value;
                    this.SendPropertyChanged("Times");
                }
            }
        }
        
        [XmlIgnore()]
        public bool Priodic {
            get {
                return this._Priodic;
            }
            set {
                if ((_Priodic != value)) {
                    this._Priodic = value;
                    this.SendPropertyChanged("Priodic");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanged(string propertyName) {
            if ((PropertyChanged != null)) {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [Serializable()]
    [XmlType(TypeName="ScheduleTime", Namespace=ScheduleUtility.SchemaNamespace)]
    public partial class ScheduleTime : INotifyPropertyChanged {
        
        [XmlAttribute(AttributeName="Date")]
        public System.DateTime _Date;
        
        [XmlIgnore()]
        public bool _DateSpecified;
        
        public const string DateProperty = "Date";
        
        [XmlAttribute(AttributeName="Start")]
        public string _Start = "08:00";
        
        public const string StartProperty = "Start";
        
        [XmlAttribute(AttributeName="Finish")]
        public string _Finish = "22:00";
        
        public const string FinishProperty = "Finish";
        
        [XmlIgnore()]
        public Nullable<System.DateTime> Date {
            get {
                if (_DateSpecified) {
                    return this._Date;
                }
                else {
                    return null;
                }
            }
            set {
                if ((_Date != value)) {
                    this._DateSpecified = value.HasValue;
                    if (value.HasValue) {
                        this._Date = value.Value;
                    }
                    this.SendPropertyChanged("Date");
                }
            }
        }
        
        [XmlIgnore()]
        public string Start {
            get {
                return this._Start;
            }
            set {
                if ((_Start != value)) {
                    this._Start = value;
                    this.SendPropertyChanged("Start");
                }
            }
        }
        
        [XmlIgnore()]
        public string Finish {
            get {
                return this._Finish;
            }
            set {
                if ((_Finish != value)) {
                    this._Finish = value;
                    this.SendPropertyChanged("Finish");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanged(string propertyName) {
            if ((PropertyChanged != null)) {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
