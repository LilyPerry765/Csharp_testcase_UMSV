//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright 2008, Tenta Corporation, Version 1.5
namespace Pendar._118 {
    using System;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    using System.IO;
    
    
    public partial class ConfigUtility {
        
        public const string SchemaNamespace = "http://tempuri.org/Config.xsd";
        
        public static string Serialize<T>(object o, bool indented)
         {
            StringWriter writer = new StringWriter();
            XmlTextWriter xmlWriter = new XmlTextWriter(writer);
            if (indented) {
                xmlWriter.Formatting = Formatting.Indented;
            }
            else {
                xmlWriter.Formatting = Formatting.None;
            }
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            serializer.Serialize(xmlWriter, o);
            return writer.ToString();
        }
        
        public static T Deserialize<T>(string objectXml)
         {
            StringReader reader = new StringReader(objectXml);
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            T classObject = ((T)(serializer.Deserialize(reader)));
            reader.Close();
            return classObject;
        }
        
        public static T DeserializeFile<T>(string path)
         {
            string xml = File.ReadAllText(path);
            return ConfigUtility.Deserialize<T>(xml);
        }
    }
    
    [Serializable()]
    [XmlRoot(ElementName="Config", Namespace=ConfigUtility.SchemaNamespace, IsNullable=false)]
    public partial class Config : INotifyPropertyChanged {
        
        [XmlAttribute(AttributeName="NormalResultCount")]
        public int _NormalResultCount = 200;
        
        public const string NormalResultCountProperty = "NormalResultCount";
        
        [XmlAttribute(AttributeName="MaxTalkTime")]
        public int _MaxTalkTime = 180;
        
        public const string MaxTalkTimeProperty = "MaxTalkTime";
        
        [XmlAttribute(AttributeName="AdvancedResultCount")]
        public int _AdvancedResultCount = 1000;
        
        public const string AdvancedResultCountProperty = "AdvancedResultCount";
        
        [XmlAttribute(AttributeName="DefaultCityCode")]
        public string _DefaultCityCode;
        
        public const string DefaultCityCodeProperty = "DefaultCityCode";
        
        [XmlAttribute(AttributeName="DefaultCityID")]
        public int _DefaultCityID;
        
        [XmlIgnore()]
        public bool _DefaultCityIDSpecified;
        
        public const string DefaultCityIDProperty = "DefaultCityID";
        
        [XmlIgnore()]
        public int NormalResultCount {
            get {
                return this._NormalResultCount;
            }
            set {
                if ((_NormalResultCount != value)) {
                    this._NormalResultCount = value;
                    this.SendPropertyChanged("NormalResultCount");
                }
            }
        }
        
        [XmlIgnore()]
        public int MaxTalkTime {
            get {
                return this._MaxTalkTime;
            }
            set {
                if ((_MaxTalkTime != value)) {
                    this._MaxTalkTime = value;
                    this.SendPropertyChanged("MaxTalkTime");
                }
            }
        }
        
        [XmlIgnore()]
        public int AdvancedResultCount {
            get {
                return this._AdvancedResultCount;
            }
            set {
                if ((_AdvancedResultCount != value)) {
                    this._AdvancedResultCount = value;
                    this.SendPropertyChanged("AdvancedResultCount");
                }
            }
        }
        
        [XmlIgnore()]
        public string DefaultCityCode {
            get {
                return this._DefaultCityCode;
            }
            set {
                if ((_DefaultCityCode != value)) {
                    this._DefaultCityCode = value;
                    this.SendPropertyChanged("DefaultCityCode");
                }
            }
        }
        
        [XmlIgnore()]
        public Nullable<int> DefaultCityID {
            get {
                if (_DefaultCityIDSpecified) {
                    return this._DefaultCityID;
                }
                else {
                    return null;
                }
            }
            set {
                if ((_DefaultCityID != value)) {
                    this._DefaultCityIDSpecified = value.HasValue;
                    if (value.HasValue) {
                        this._DefaultCityID = value.Value;
                    }
                    this.SendPropertyChanged("DefaultCityID");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanged(string propertyName) {
            if ((PropertyChanged != null)) {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
