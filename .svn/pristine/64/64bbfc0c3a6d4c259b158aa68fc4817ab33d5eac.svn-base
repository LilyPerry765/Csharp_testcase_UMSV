//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright 2013, Mina Corporation, Version 1.5
namespace UMSV.Schema
{
    using System;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;


    public partial class ConfigUtility
    {

        public const string SchemaNamespace = "http://tempuri.org/Config.xsd";

        public static string Serialize<T>(object o, bool indented)
        {
            System.IO.StringWriter writer = new System.IO.StringWriter();
            XmlTextWriter xmlWriter = new XmlTextWriter(writer);
            if (indented)
            {
                xmlWriter.Formatting = Formatting.Indented;
            }
            else
            {
                xmlWriter.Formatting = Formatting.None;
            }
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            serializer.Serialize(xmlWriter, o);
            return writer.ToString();
        }

        public static T Deserialize<T>(string objectXml)
        {
            System.IO.StringReader reader = new System.IO.StringReader(objectXml);
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            T classObject = ((T)(serializer.Deserialize(reader)));
            reader.Close();
            return classObject;
        }

        public static T DeserializeFile<T>(string path)
        {
            string xml = System.IO.File.ReadAllText(path);
            return ConfigUtility.Deserialize<T>(xml);
        }
    }

    [Serializable()]
    public enum ClientLoginMode
    {

        Multiple,

        SingleMachine,

        SingleAddress,
    }

    [Serializable()]
    public enum TalkingVoiceRecordMode
    {

        Merged,

        NoRecord,

        Separately,

        All,
    }

    [Serializable()]
    public enum TransferMode
    {

        Auto,

        Blind,

        Attended,
    }

    [Serializable()]
    public enum DialogStatus
    {

        Connect,

        Recording,

        Refering,

        Disconnected,

        Invite,

        InviteWaitForAck,

        FaxOKWaitForAck,

        Hold,

        Dialing,

        Ringing,

        ByingWaitForOk,

        UserBusySentWaitForAck,

        CancelingWaitForAck,

        RejectWaitForAck,

        WaitForDiverting,

        ReferingWaitForAccept,

        Transferring,

        DivertingWaitForTargetResponse,

        DivertingFailed,

        Talking,

        DialingWaitForOk,

        ReInvitingForFax,
    }

    [Serializable()]
    [XmlRoot(ElementName = "Config", Namespace = ConfigUtility.SchemaNamespace, IsNullable = false)]
    public partial class Config : INotifyPropertyChanged
    {

        [XmlElement(ElementName = "Timeout")]
        public List<ConfigTimeout> _Timeouts;

        public const string TimeoutsProperty = "Timeouts";

        [XmlElement(ElementName = "Dial")]
        public ConfigDial _Dial;

        public const string DialProperty = "Dial";

        [XmlElement(ElementName = "GsmModem")]
        public ConfigGsmModem _GsmModem;

        public const string GsmModemProperty = "GsmModem";

        [XmlAttribute(AttributeName = "SipNetSocketStartRetryTimes")]
        public int _SipNetSocketStartRetryTimes = 5;

        public const string SipNetSocketStartRetryTimesProperty = "SipNetSocketStartRetryTimes";

        [XmlAttribute(AttributeName = "SoftPhoneMaxConcurrentCalls")]
        public int _SoftPhoneMaxConcurrentCalls = 1;

        public const string SoftPhoneMaxConcurrentCallsProperty = "SoftPhoneMaxConcurrentCalls";

        [XmlAttribute(AttributeName = "SipNetSocketStartRetryInterval")]
        public int _SipNetSocketStartRetryInterval = 2000;

        public const string SipNetSocketStartRetryIntervalProperty = "SipNetSocketStartRetryInterval";

        [XmlAttribute(AttributeName = "SipProxyPort")]
        public int _SipProxyPort = 5060;

        public const string SipProxyPortProperty = "SipProxyPort";

        [XmlAttribute(AttributeName = "SipProxyAddress")]
        public string _SipProxyAddress;

        public const string SipProxyAddressProperty = "SipProxyAddress";

        [XmlAttribute(AttributeName = "SoftPhoneRegistrationDomain")]
        public string _SoftPhoneRegistrationDomain;

        public const string SoftPhoneRegistrationDomainProperty = "SoftPhoneRegistrationDomain";

        [XmlAttribute(AttributeName = "SoftPhoneLocalPortFrom")]
        public int _SoftPhoneLocalPortFrom = 4000;

        public const string SoftPhoneLocalPortFromProperty = "SoftPhoneLocalPortFrom";

        [XmlAttribute(AttributeName = "SoftPhoneLocalPortTo")]
        public int _SoftPhoneLocalPortTo = 5000;

        public const string SoftPhoneLocalPortToProperty = "SoftPhoneLocalPortTo";

        [XmlAttribute(AttributeName = "RingingTimeout")]
        public int _RingingTimeout = 30;

        public const string RingingTimeoutProperty = "RingingTimeout";

        [XmlAttribute(AttributeName = "AllowRegisterAnonymousAccount")]
        public bool _AllowRegisterAnonymousAccount = true;

        public const string AllowRegisterAnonymousAccountProperty = "AllowRegisterAnonymousAccount";

        [XmlAttribute(AttributeName = "OutcallPrefix")]
        public string _OutcallPrefix = "199";

        public const string OutcallPrefixProperty = "OutcallPrefix";

        [XmlAttribute(AttributeName = "InformingRetryInterval")]
        public int _InformingRetryInterval = 60;

        public const string InformingRetryIntervalProperty = "InformingRetryInterval";

        [XmlAttribute(AttributeName = "InformingConcurrentCalls")]
        public int _InformingConcurrentCalls;

        public const string InformingConcurrentCallsProperty = "InformingConcurrentCalls";

        [XmlAttribute(AttributeName = "RtpLocalPortFrom")]
        public int _RtpLocalPortFrom = 5000;

        public const string RtpLocalPortFromProperty = "RtpLocalPortFrom";

        [XmlAttribute(AttributeName = "RtpLocalPortTo")]
        public int _RtpLocalPortTo = 25000;

        public const string RtpLocalPortToProperty = "RtpLocalPortTo";

        [XmlAttribute(AttributeName = "DefaultExpireSeconds")]
        public int _DefaultExpireSeconds = 3600;

        public const string DefaultExpireSecondsProperty = "DefaultExpireSeconds";

        [XmlAttribute(AttributeName = "CityCode")]
        public string _CityCode;

        public const string CityCodeProperty = "CityCode";

        [XmlAttribute(AttributeName = "MonitoringRefreshRate")]
        public int _MonitoringRefreshRate = 1;

        public const string MonitoringRefreshRateProperty = "MonitoringRefreshRate";

        [XmlAttribute(AttributeName = "AcceptCallFromNotRegisterUser")]
        public bool _AcceptCallFromNotRegisterUser = false;

        public const string AcceptCallFromNotRegisterUserProperty = "AcceptCallFromNotRegisterUser";

        [XmlAttribute(AttributeName = "CheckMessagesTimeoutsInterval")]
        public int _CheckMessagesTimeoutsInterval = 100;

        public const string CheckMessagesTimeoutsIntervalProperty = "CheckMessagesTimeoutsInterval";

        [XmlAttribute(AttributeName = "CheckAccountsTimeoutsInterval")]
        public int _CheckAccountsTimeoutsInterval = 1000;

        public const string CheckAccountsTimeoutsIntervalProperty = "CheckAccountsTimeoutsInterval";

        [XmlAttribute(AttributeName = "LogChangeStatusMessage")]
        public bool _LogChangeStatusMessage = true;

        public const string LogChangeStatusMessageProperty = "LogChangeStatusMessage";

        [XmlAttribute(AttributeName = "LogSipMessage")]
        public bool _LogSipMessage = true;

        public const string LogSipMessageProperty = "LogSipMessage";

        [XmlAttribute(AttributeName = "DivertWaitGraph")]
        public string _DivertWaitGraph;

        public const string DivertWaitGraphProperty = "DivertWaitGraph";

        [XmlAttribute(AttributeName = "AnnounceOperatorUserIDOnAnswer")]
        public bool _AnnounceOperatorUserIDOnAnswer = true;

        public const string AnnounceOperatorUserIDOnAnswerProperty = "AnnounceOperatorUserIDOnAnswer";

        [XmlAttribute(AttributeName = "AnnounceOperatorUserIDOnEnd")]
        public bool _AnnounceOperatorUserIDOnEnd = false;

        public const string AnnounceOperatorUserIDOnEndProperty = "AnnounceOperatorUserIDOnEnd";

        [XmlAttribute(AttributeName = "NodeTimeoutCheckInterval")]
        public int _NodeTimeoutCheckInterval = 100;

        public const string NodeTimeoutCheckIntervalProperty = "NodeTimeoutCheckInterval";

        [XmlAttribute(AttributeName = "OperatorIncommingCallWelcomeVoiceFormat")]
        public string _OperatorIncommingCallWelcomeVoiceFormat = "@ ({0})";

        public const string OperatorIncommingCallWelcomeVoiceFormatProperty = "OperatorIncommingCallWelcomeVoiceFormat";

        [XmlAttribute(AttributeName = "DefaultGraph")]
        public System.Guid _DefaultGraph;

        public const string DefaultGraphProperty = "DefaultGraph";

        [XmlAttribute(AttributeName = "OperatorDivertInterval")]
        public int _OperatorDivertInterval = 1000;

        public const string OperatorDivertIntervalProperty = "OperatorDivertInterval";

        [XmlAttribute(AttributeName = "OperatorMaxAllowedNoAnswerCalls")]
        public int _OperatorMaxAllowedNoAnswerCalls = 3;

        public const string OperatorMaxAllowedNoAnswerCallsProperty = "OperatorMaxAllowedNoAnswerCalls";

        [XmlAttribute(AttributeName = "TalkingMinimumValidTimeToSave")]
        public int _TalkingMinimumValidTimeToSave = 500;

        public const string TalkingMinimumValidTimeToSaveProperty = "TalkingMinimumValidTimeToSave";

        [XmlAttribute(AttributeName = "LoopedInvokeMaxTimes")]
        public int _LoopedInvokeMaxTimes = 5;

        public const string LoopedInvokeMaxTimesProperty = "LoopedInvokeMaxTimes";

        [XmlAttribute(AttributeName = "LoopedInvokeMinInterval")]
        public int _LoopedInvokeMinInterval = 2000;

        public const string LoopedInvokeMinIntervalProperty = "LoopedInvokeMinInterval";

        [XmlAttribute(AttributeName = "VoiceDirectory")]
        public string _VoiceDirectory = "D:\\Voice";

        public const string VoiceDirectoryProperty = "VoiceDirectory";

        [XmlAttribute(AttributeName = "FaxDirectory")]
        public string _FaxDirectory = "D:\\Fax";

        public const string FaxDirectoryProperty = "FaxDirectory";

        [XmlAttribute(AttributeName = "FaxRepository")]
        public string _FaxRepository = "D:\\FaxRepository";

        public const string FaxRepositoryProperty = "FaxRepository";

        [XmlAttribute(AttributeName = "AssumeSessionUserAsSoftPhoneUser")]
        public bool _AssumeSessionUserAsSoftPhoneUser = true;

        public const string AssumeSessionUserAsSoftPhoneUserProperty = "AssumeSessionUserAsSoftPhoneUser";

        [XmlAttribute(AttributeName = "OperatorsMonitoringRefreshInterval")]
        public int _OperatorsMonitoringRefreshInterval = 5000;

        public const string OperatorsMonitoringRefreshIntervalProperty = "OperatorsMonitoringRefreshInterval";

        [XmlAttribute(AttributeName = "SoftPhoneShowIncommingCallCallerID")]
        public bool _SoftPhoneShowIncommingCallCallerID = true;

        public const string SoftPhoneShowIncommingCallCallerIDProperty = "SoftPhoneShowIncommingCallCallerID";

        [XmlAttribute(AttributeName = "DefaultPlaybackVolume")]
        public ushort _DefaultPlaybackVolume = 48000;

        public const string DefaultPlaybackVolumeProperty = "DefaultPlaybackVolume";

        [XmlAttribute(AttributeName = "ClientRegisterPeriod")]
        public int _ClientRegisterPeriod = 60000;

        public const string ClientRegisterPeriodProperty = "ClientRegisterPeriod";

        [XmlAttribute(AttributeName = "HardDiskFreeSpaceRadio")]
        public int _HardDiskFreeSpaceRadio = 10;

        public const string HardDiskFreeSpaceRadioProperty = "HardDiskFreeSpaceRadio";

        [XmlAttribute(AttributeName = "VoiceFilesMaxArchiveDays")]
        public int _VoiceFilesMaxArchiveDays = 15;

        public const string VoiceFilesMaxArchiveDaysProperty = "VoiceFilesMaxArchiveDays";

        [XmlAttribute(AttributeName = "ReportsCommandTimeout")]
        public int _ReportsCommandTimeout = 60;

        public const string ReportsCommandTimeoutProperty = "ReportsCommandTimeout";

        [XmlAttribute(AttributeName = "TransferMode")]
        public TransferMode _TransferMode = TransferMode.Attended;

        public const string TransferModeProperty = "TransferMode";

        [XmlAttribute(AttributeName = "ContinueOnRtpReceiveSocketError")]
        public bool _ContinueOnRtpReceiveSocketError = false;

        public const string ContinueOnRtpReceiveSocketErrorProperty = "ContinueOnRtpReceiveSocketError";

        [XmlAttribute(AttributeName = "DtmfDetectionInterval")]
        public int _DtmfDetectionInterval = 200;

        public const string DtmfDetectionIntervalProperty = "DtmfDetectionInterval";

        [XmlAttribute(AttributeName = "SessionStatusFlushInterval")]
        public int _SessionStatusFlushInterval = 600000;

        public const string SessionStatusFlushIntervalProperty = "SessionStatusFlushInterval";

        [XmlAttribute(AttributeName = "SessionTimeout")]
        public int _SessionTimeout = 300000;

        public const string SessionTimeoutProperty = "SessionTimeout";

        [XmlAttribute(AttributeName = "RequestStaticInfoFromServerTimerInterval")]
        public int _RequestStaticInfoFromServerTimerInterval = 60000;

        public const string RequestStaticInfoFromServerTimerIntervalProperty = "RequestStaticInfoFromServerTimerInterval";

        [XmlAttribute(AttributeName = "TalkingVoiceRecordMode")]
        public TalkingVoiceRecordMode _TalkingVoiceRecordMode = TalkingVoiceRecordMode.Merged;

        public const string TalkingVoiceRecordModeProperty = "TalkingVoiceRecordMode";

        [XmlAttribute(AttributeName = "ClientLoginMode")]
        public ClientLoginMode _ClientLoginMode = ClientLoginMode.Multiple;

        public const string ClientLoginModeProperty = "ClientLoginMode";

        [XmlAttribute(AttributeName = "SingleSoftwareLogin")]
        public bool _SingleSoftwareLogin = false;

        public const string SingleSoftwareLoginProperty = "SingleSoftwareLogin";

        [XmlAttribute(AttributeName = "SendCallToDnd")]
        public bool _SendCallToDnd = true;

        public const string SendCallToDndProperty = "SendCallToDnd";

        [XmlAttribute(AttributeName = "DashboardMonitorServerSystemParams")]
        public bool _DashboardMonitorServerSystemParams = true;

        public const string DashboardMonitorServerSystemParamsProperty = "DashboardMonitorServerSystemParams";

        [XmlAttribute(AttributeName = "DashboardMonitorLinksCount")]
        public bool _DashboardMonitorLinksCount = true;

        public const string DashboardMonitorLinksCountProperty = "DashboardMonitorLinksCount";

        [XmlAttribute(AttributeName = "StatusCodeOnDndRejection")]
        public int _StatusCodeOnDndRejection = 490;

        public const string StatusCodeOnDndRejectionProperty = "StatusCodeOnDndRejection";

        [XmlAttribute(AttributeName = "DisconnectCauseOnDndRejection")]
        public int _DisconnectCauseOnDndRejection = 21;

        public const string DisconnectCauseOnDndRejectionProperty = "DisconnectCauseOnDndRejection";

        [XmlAttribute(AttributeName = "LogRtp")]
        public bool _LogRtp = false;

        public const string LogRtpProperty = "LogRtp";

        [XmlAttribute(AttributeName = "OnlyAcceptEmbeddedSoftPhoneRegistration")]
        public bool _OnlyAcceptEmbeddedSoftPhoneRegistration = false;

        public const string OnlyAcceptEmbeddedSoftPhoneRegistrationProperty = "OnlyAcceptEmbeddedSoftPhoneRegistration";

        [XmlAttribute(AttributeName = "QueueTransferIfNoOnlineAccount")]
        public bool _QueueTransferIfNoOnlineAccount = false;

        public const string QueueTransferIfNoOnlineAccountProperty = "QueueTransferIfNoOnlineAccount";

        [XmlIgnore()]
        public List<ConfigTimeout> Timeouts
        {
            get
            {
                if ((_Timeouts == null))
                {
                    _Timeouts = new List<ConfigTimeout>();
                }
                return _Timeouts;
            }
            set
            {
                if ((_Timeouts != value))
                {
                    this._Timeouts = value;
                    this.SendPropertyChanged("Timeouts");
                }
            }
        }

        [XmlIgnore()]
        public ConfigDial Dial
        {
            get
            {
                if ((_Dial == null))
                {
                    _Dial = new ConfigDial();
                }
                return _Dial;
            }
            set
            {
                if ((_Dial != value))
                {
                    this._Dial = value;
                    this.SendPropertyChanged("Dial");
                }
            }
        }

        [XmlIgnore()]
        public ConfigGsmModem GsmModem
        {
            get
            {
                if ((_GsmModem == null))
                {
                    _GsmModem = new ConfigGsmModem();
                }
                return _GsmModem;
            }
            set
            {
                if ((_GsmModem != value))
                {
                    this._GsmModem = value;
                    this.SendPropertyChanged("GsmModem");
                }
            }
        }

        [XmlIgnore()]
        public int SipNetSocketStartRetryTimes
        {
            get
            {
                return this._SipNetSocketStartRetryTimes;
            }
            set
            {
                if ((_SipNetSocketStartRetryTimes != value))
                {
                    this._SipNetSocketStartRetryTimes = value;
                    this.SendPropertyChanged("SipNetSocketStartRetryTimes");
                }
            }
        }

        [XmlIgnore()]
        public int SoftPhoneMaxConcurrentCalls
        {
            get
            {
                return this._SoftPhoneMaxConcurrentCalls;
            }
            set
            {
                if ((_SoftPhoneMaxConcurrentCalls != value))
                {
                    this._SoftPhoneMaxConcurrentCalls = value;
                    this.SendPropertyChanged("SoftPhoneMaxConcurrentCalls");
                }
            }
        }

        [XmlIgnore()]
        public int SipNetSocketStartRetryInterval
        {
            get
            {
                return this._SipNetSocketStartRetryInterval;
            }
            set
            {
                if ((_SipNetSocketStartRetryInterval != value))
                {
                    this._SipNetSocketStartRetryInterval = value;
                    this.SendPropertyChanged("SipNetSocketStartRetryInterval");
                }
            }
        }

        [XmlIgnore()]
        public int SipProxyPort
        {
            get
            {
                return this._SipProxyPort;
            }
            set
            {
                if ((_SipProxyPort != value))
                {
                    this._SipProxyPort = value;
                    this.SendPropertyChanged("SipProxyPort");
                }
            }
        }

        [XmlIgnore()]
        public string SipProxyAddress
        {
            get
            {
                return this._SipProxyAddress;
            }
            set
            {
                if ((_SipProxyAddress != value))
                {
                    this._SipProxyAddress = value;
                    this.SendPropertyChanged("SipProxyAddress");
                }
            }
        }

        [XmlIgnore()]
        public string SoftPhoneRegistrationDomain
        {
            get
            {
                return this._SoftPhoneRegistrationDomain;
            }
            set
            {
                if ((_SoftPhoneRegistrationDomain != value))
                {
                    this._SoftPhoneRegistrationDomain = value;
                    this.SendPropertyChanged("SoftPhoneRegistrationDomain");
                }
            }
        }

        [XmlIgnore()]
        public int SoftPhoneLocalPortFrom
        {
            get
            {
                return this._SoftPhoneLocalPortFrom;
            }
            set
            {
                if ((_SoftPhoneLocalPortFrom != value))
                {
                    this._SoftPhoneLocalPortFrom = value;
                    this.SendPropertyChanged("SoftPhoneLocalPortFrom");
                }
            }
        }

        [XmlIgnore()]
        public int SoftPhoneLocalPortTo
        {
            get
            {
                return this._SoftPhoneLocalPortTo;
            }
            set
            {
                if ((_SoftPhoneLocalPortTo != value))
                {
                    this._SoftPhoneLocalPortTo = value;
                    this.SendPropertyChanged("SoftPhoneLocalPortTo");
                }
            }
        }

        [XmlIgnore()]
        public int RingingTimeout
        {
            get
            {
                return this._RingingTimeout;
            }
            set
            {
                if ((_RingingTimeout != value))
                {
                    this._RingingTimeout = value;
                    this.SendPropertyChanged("RingingTimeout");
                }
            }
        }

        [XmlIgnore()]
        public bool AllowRegisterAnonymousAccount
        {
            get
            {
                return this._AllowRegisterAnonymousAccount;
            }
            set
            {
                if ((_AllowRegisterAnonymousAccount != value))
                {
                    this._AllowRegisterAnonymousAccount = value;
                    this.SendPropertyChanged("AllowRegisterAnonymousAccount");
                }
            }
        }

        [XmlIgnore()]
        public string OutcallPrefix
        {
            get
            {
                return this._OutcallPrefix;
            }
            set
            {
                if ((_OutcallPrefix != value))
                {
                    this._OutcallPrefix = value;
                    this.SendPropertyChanged("OutcallPrefix");
                }
            }
        }

        [XmlIgnore()]
        public int InformingConcurrentCalls
        {
            get
            {
                return this._InformingConcurrentCalls;
            }
            set
            {
                if ((_InformingConcurrentCalls != value))
                {
                    this._InformingConcurrentCalls = value;
                    this.SendPropertyChanged("InformingConcurrentCalls");
                }
            }
        }

        [XmlIgnore()]
        public int InformingRetryInterval
        {
            get
            {
                return this._InformingRetryInterval;
            }
            set
            {
                if ((_InformingRetryInterval != value))
                {
                    this._InformingRetryInterval = value;
                    this.SendPropertyChanged("InformingRetryInterval");
                }
            }
        }

        [XmlIgnore()]
        public int RtpLocalPortFrom
        {
            get
            {
                return this._RtpLocalPortFrom;
            }
            set
            {
                if ((_RtpLocalPortFrom != value))
                {
                    this._RtpLocalPortFrom = value;
                    this.SendPropertyChanged("RtpLocalPortFrom");
                }
            }
        }

        [XmlIgnore()]
        public int RtpLocalPortTo
        {
            get
            {
                return this._RtpLocalPortTo;
            }
            set
            {
                if ((_RtpLocalPortTo != value))
                {
                    this._RtpLocalPortTo = value;
                    this.SendPropertyChanged("RtpLocalPortTo");
                }
            }
        }

        [XmlIgnore()]
        public int DefaultExpireSeconds
        {
            get
            {
                return this._DefaultExpireSeconds;
            }
            set
            {
                if ((_DefaultExpireSeconds != value))
                {
                    this._DefaultExpireSeconds = value;
                    this.SendPropertyChanged("DefaultExpireSeconds");
                }
            }
        }

        [XmlIgnore()]
        public string CityCode
        {
            get
            {
                return this._CityCode;
            }
            set
            {
                if ((_CityCode != value))
                {
                    this._CityCode = value;
                    this.SendPropertyChanged("CityCode");
                }
            }
        }

        [XmlIgnore()]
        public int MonitoringRefreshRate
        {
            get
            {
                return this._MonitoringRefreshRate;
            }
            set
            {
                if ((_MonitoringRefreshRate != value))
                {
                    this._MonitoringRefreshRate = value;
                    this.SendPropertyChanged("MonitoringRefreshRate");
                }
            }
        }

        [XmlIgnore()]
        public bool AcceptCallFromNotRegisterUser
        {
            get
            {
                return this._AcceptCallFromNotRegisterUser;
            }
            set
            {
                if ((_AcceptCallFromNotRegisterUser != value))
                {
                    this._AcceptCallFromNotRegisterUser = value;
                    this.SendPropertyChanged("AcceptCallFromNotRegisterUser");
                }
            }
        }

        [XmlIgnore()]
        public int CheckMessagesTimeoutsInterval
        {
            get
            {
                return this._CheckMessagesTimeoutsInterval;
            }
            set
            {
                if ((_CheckMessagesTimeoutsInterval != value))
                {
                    this._CheckMessagesTimeoutsInterval = value;
                    this.SendPropertyChanged("CheckMessagesTimeoutsInterval");
                }
            }
        }

        [XmlIgnore()]
        public int CheckAccountsTimeoutsInterval
        {
            get
            {
                return this._CheckAccountsTimeoutsInterval;
            }
            set
            {
                if ((_CheckAccountsTimeoutsInterval != value))
                {
                    this._CheckAccountsTimeoutsInterval = value;
                    this.SendPropertyChanged("CheckAccountsTimeoutsInterval");
                }
            }
        }

        [XmlIgnore()]
        public bool LogChangeStatusMessage
        {
            get
            {
                return this._LogChangeStatusMessage;
            }
            set
            {
                if ((_LogChangeStatusMessage != value))
                {
                    this._LogChangeStatusMessage = value;
                    this.SendPropertyChanged("LogChangeStatusMessage");
                }
            }
        }

        [XmlIgnore()]
        public bool LogSipMessage
        {
            get
            {
                return this._LogSipMessage;
            }
            set
            {
                if ((_LogSipMessage != value))
                {
                    this._LogSipMessage = value;
                    this.SendPropertyChanged("LogSipMessage");
                }
            }
        }

        [XmlIgnore()]
        public string DivertWaitGraph
        {
            get
            {
                return this._DivertWaitGraph;
            }
            set
            {
                if ((_DivertWaitGraph != value))
                {
                    this._DivertWaitGraph = value;
                    this.SendPropertyChanged("DivertWaitGraph");
                }
            }
        }

        [XmlIgnore()]
        public bool AnnounceOperatorUserIDOnAnswer
        {
            get
            {
                return this._AnnounceOperatorUserIDOnAnswer;
            }
            set
            {
                if ((_AnnounceOperatorUserIDOnAnswer != value))
                {
                    this._AnnounceOperatorUserIDOnAnswer = value;
                    this.SendPropertyChanged("AnnounceOperatorUserIDOnAnswer");
                }
            }
        }

        [XmlIgnore()]
        public bool AnnounceOperatorUserIDOnEnd
        {
            get
            {
                return this._AnnounceOperatorUserIDOnEnd;
            }
            set
            {
                if ((_AnnounceOperatorUserIDOnEnd != value))
                {
                    this._AnnounceOperatorUserIDOnEnd = value;
                    this.SendPropertyChanged("AnnounceOperatorUserIDOnEnd");
                }
            }
        }

        [XmlIgnore()]
        public int NodeTimeoutCheckInterval
        {
            get
            {
                return this._NodeTimeoutCheckInterval;
            }
            set
            {
                if ((_NodeTimeoutCheckInterval != value))
                {
                    this._NodeTimeoutCheckInterval = value;
                    this.SendPropertyChanged("NodeTimeoutCheckInterval");
                }
            }
        }

        [XmlIgnore()]
        public string OperatorIncommingCallWelcomeVoiceFormat
        {
            get
            {
                return this._OperatorIncommingCallWelcomeVoiceFormat;
            }
            set
            {
                if ((_OperatorIncommingCallWelcomeVoiceFormat != value))
                {
                    this._OperatorIncommingCallWelcomeVoiceFormat = value;
                    this.SendPropertyChanged("OperatorIncommingCallWelcomeVoiceFormat");
                }
            }
        }

        [XmlIgnore()]
        public System.Guid DefaultGraph
        {
            get
            {
                return this._DefaultGraph;
            }
            set
            {
                if ((_DefaultGraph != value))
                {
                    this._DefaultGraph = value;
                    this.SendPropertyChanged("DefaultGraph");
                }
            }
        }

        [XmlIgnore()]
        public int OperatorDivertInterval
        {
            get
            {
                return this._OperatorDivertInterval;
            }
            set
            {
                if ((_OperatorDivertInterval != value))
                {
                    this._OperatorDivertInterval = value;
                    this.SendPropertyChanged("OperatorDivertInterval");
                }
            }
        }

        [XmlIgnore()]
        public int OperatorMaxAllowedNoAnswerCalls
        {
            get
            {
                return this._OperatorMaxAllowedNoAnswerCalls;
            }
            set
            {
                if ((_OperatorMaxAllowedNoAnswerCalls != value))
                {
                    this._OperatorMaxAllowedNoAnswerCalls = value;
                    this.SendPropertyChanged("OperatorMaxAllowedNoAnswerCalls");
                }
            }
        }

        [XmlIgnore()]
        public int TalkingMinimumValidTimeToSave
        {
            get
            {
                return this._TalkingMinimumValidTimeToSave;
            }
            set
            {
                if ((_TalkingMinimumValidTimeToSave != value))
                {
                    this._TalkingMinimumValidTimeToSave = value;
                    this.SendPropertyChanged("TalkingMinimumValidTimeToSave");
                }
            }
        }

        [XmlIgnore()]
        public int LoopedInvokeMaxTimes
        {
            get
            {
                return this._LoopedInvokeMaxTimes;
            }
            set
            {
                if ((_LoopedInvokeMaxTimes != value))
                {
                    this._LoopedInvokeMaxTimes = value;
                    this.SendPropertyChanged("LoopedInvokeMaxTimes");
                }
            }
        }

        [XmlIgnore()]
        public int LoopedInvokeMinInterval
        {
            get
            {
                return this._LoopedInvokeMinInterval;
            }
            set
            {
                if ((_LoopedInvokeMinInterval != value))
                {
                    this._LoopedInvokeMinInterval = value;
                    this.SendPropertyChanged("LoopedInvokeMinInterval");
                }
            }
        }

        [XmlIgnore()]
        public string VoiceDirectory
        {
            get
            {
                return this._VoiceDirectory;
            }
            set
            {
                if ((_VoiceDirectory != value))
                {
                    this._VoiceDirectory = value;
                    this.SendPropertyChanged("VoiceDirectory");
                }
            }
        }

        [XmlIgnore()]
        public string FaxDirectory
        {
            get
            {
                return this._FaxDirectory;
            }
            set
            {
                if ((_FaxDirectory != value))
                {
                    this._FaxDirectory = value;
                    this.SendPropertyChanged("FaxDirectory");
                }
            }
        }

        [XmlIgnore()]
        public string FaxRepository
        {
            get
            {
                return this._FaxRepository;
            }
            set
            {
                if ((_FaxRepository != value))
                {
                    this._FaxRepository = value;
                    this.SendPropertyChanged("FaxRepository");
                }
            }
        }

        [XmlIgnore()]
        public bool AssumeSessionUserAsSoftPhoneUser
        {
            get
            {
                return this._AssumeSessionUserAsSoftPhoneUser;
            }
            set
            {
                if ((_AssumeSessionUserAsSoftPhoneUser != value))
                {
                    this._AssumeSessionUserAsSoftPhoneUser = value;
                    this.SendPropertyChanged("AssumeSessionUserAsSoftPhoneUser");
                }
            }
        }

        [XmlIgnore()]
        public int OperatorsMonitoringRefreshInterval
        {
            get
            {
                return this._OperatorsMonitoringRefreshInterval;
            }
            set
            {
                if ((_OperatorsMonitoringRefreshInterval != value))
                {
                    this._OperatorsMonitoringRefreshInterval = value;
                    this.SendPropertyChanged("OperatorsMonitoringRefreshInterval");
                }
            }
        }

        [XmlIgnore()]
        public bool SoftPhoneShowIncommingCallCallerID
        {
            get
            {
                return this._SoftPhoneShowIncommingCallCallerID;
            }
            set
            {
                if ((_SoftPhoneShowIncommingCallCallerID != value))
                {
                    this._SoftPhoneShowIncommingCallCallerID = value;
                    this.SendPropertyChanged("SoftPhoneShowIncommingCallCallerID");
                }
            }
        }

        [XmlIgnore()]
        public ushort DefaultPlaybackVolume
        {
            get
            {
                return this._DefaultPlaybackVolume;
            }
            set
            {
                if ((_DefaultPlaybackVolume != value))
                {
                    this._DefaultPlaybackVolume = value;
                    this.SendPropertyChanged("DefaultPlaybackVolume");
                }
            }
        }

        [XmlIgnore()]
        public int ClientRegisterPeriod
        {
            get
            {
                return this._ClientRegisterPeriod;
            }
            set
            {
                if ((_ClientRegisterPeriod != value))
                {
                    this._ClientRegisterPeriod = value;
                    this.SendPropertyChanged("ClientRegisterPeriod");
                }
            }
        }

        [XmlIgnore()]
        public int HardDiskFreeSpaceRadio
        {
            get
            {
                return this._HardDiskFreeSpaceRadio;
            }
            set
            {
                if ((_HardDiskFreeSpaceRadio != value))
                {
                    this._HardDiskFreeSpaceRadio = value;
                    this.SendPropertyChanged("HardDiskFreeSpaceRadio");
                }
            }
        }

        [XmlIgnore()]
        public int VoiceFilesMaxArchiveDays
        {
            get
            {
                return this._VoiceFilesMaxArchiveDays;
            }
            set
            {
                if ((_VoiceFilesMaxArchiveDays != value))
                {
                    this._VoiceFilesMaxArchiveDays = value;
                    this.SendPropertyChanged("VoiceFilesMaxArchiveDays");
                }
            }
        }

        [XmlIgnore()]
        public int ReportsCommandTimeout
        {
            get
            {
                return this._ReportsCommandTimeout;
            }
            set
            {
                if ((_ReportsCommandTimeout != value))
                {
                    this._ReportsCommandTimeout = value;
                    this.SendPropertyChanged("ReportsCommandTimeout");
                }
            }
        }

        [XmlIgnore()]
        public TransferMode TransferMode
        {
            get
            {
                return this._TransferMode;
            }
            set
            {
                if ((_TransferMode != value))
                {
                    this._TransferMode = value;
                    this.SendPropertyChanged("TransferMode");
                }
            }
        }

        [XmlIgnore()]
        public bool ContinueOnRtpReceiveSocketError
        {
            get
            {
                return this._ContinueOnRtpReceiveSocketError;
            }
            set
            {
                if ((_ContinueOnRtpReceiveSocketError != value))
                {
                    this._ContinueOnRtpReceiveSocketError = value;
                    this.SendPropertyChanged("ContinueOnRtpReceiveSocketError");
                }
            }
        }

        [XmlIgnore()]
        public int DtmfDetectionInterval
        {
            get
            {
                return this._DtmfDetectionInterval;
            }
            set
            {
                if ((_DtmfDetectionInterval != value))
                {
                    this._DtmfDetectionInterval = value;
                    this.SendPropertyChanged("DtmfDetectionInterval");
                }
            }
        }

        [XmlIgnore()]
        public int SessionStatusFlushInterval
        {
            get
            {
                return this._SessionStatusFlushInterval;
            }
            set
            {
                if ((_SessionStatusFlushInterval != value))
                {
                    this._SessionStatusFlushInterval = value;
                    this.SendPropertyChanged("SessionStatusFlushInterval");
                }
            }
        }

        [XmlIgnore()]
        public int SessionTimeout
        {
            get
            {
                return this._SessionTimeout;
            }
            set
            {
                if ((_SessionTimeout != value))
                {
                    this._SessionTimeout = value;
                    this.SendPropertyChanged("SessionTimeout");
                }
            }
        }

        [XmlIgnore()]
        public int RequestStaticInfoFromServerTimerInterval
        {
            get
            {
                return this._RequestStaticInfoFromServerTimerInterval;
            }
            set
            {
                if ((_RequestStaticInfoFromServerTimerInterval != value))
                {
                    this._RequestStaticInfoFromServerTimerInterval = value;
                    this.SendPropertyChanged("RequestStaticInfoFromServerTimerInterval");
                }
            }
        }

        [XmlIgnore()]
        public TalkingVoiceRecordMode TalkingVoiceRecordMode
        {
            get
            {
                return this._TalkingVoiceRecordMode;
            }
            set
            {
                if ((_TalkingVoiceRecordMode != value))
                {
                    this._TalkingVoiceRecordMode = value;
                    this.SendPropertyChanged("TalkingVoiceRecordMode");
                }
            }
        }

        [XmlIgnore()]
        public ClientLoginMode ClientLoginMode
        {
            get
            {
                return this._ClientLoginMode;
            }
            set
            {
                if ((_ClientLoginMode != value))
                {
                    this._ClientLoginMode = value;
                    this.SendPropertyChanged("ClientLoginMode");
                }
            }
        }


        [XmlIgnore()]
        public bool SingleSoftwareLogin
        {
            get
            {
                return this._SingleSoftwareLogin;
            }
            set
            {
                if ((_SingleSoftwareLogin != value))
                {
                    this._SingleSoftwareLogin = value;
                    this.SendPropertyChanged("SingleSoftwareLogin");
                }
            }
        }

        [XmlIgnore()]
        public bool SendCallToDnd
        {
            get
            {
                return this._SendCallToDnd;
            }
            set
            {
                if ((_SendCallToDnd != value))
                {
                    this._SendCallToDnd = value;
                    this.SendPropertyChanged("SendCallToDnd");
                }
            }
        }

        [XmlIgnore()]
        public bool DashboardMonitorServerSystemParams
        {
            get
            {
                return this._DashboardMonitorServerSystemParams;
            }
            set
            {
                if ((_DashboardMonitorServerSystemParams != value))
                {
                    this._DashboardMonitorServerSystemParams = value;
                    this.SendPropertyChanged("DashboardMonitorServerSystemParams");
                }
            }
        }

        [XmlIgnore()]
        public bool DashboardMonitorLinksCount
        {
            get
            {
                return this._DashboardMonitorLinksCount;
            }
            set
            {
                if ((_DashboardMonitorLinksCount != value))
                {
                    this._DashboardMonitorLinksCount = value;
                    this.SendPropertyChanged("DashboardMonitorLinksCount");
                }
            }
        }

        [XmlIgnore()]
        public int StatusCodeOnDndRejection
        {
            get
            {
                return this._StatusCodeOnDndRejection;
            }
            set
            {
                if ((_StatusCodeOnDndRejection != value))
                {
                    this._StatusCodeOnDndRejection = value;
                    this.SendPropertyChanged("StatusCodeOnDndRejection");
                }
            }
        }

        [XmlIgnore()]
        public int DisconnectCauseOnDndRejection
        {
            get
            {
                return this._DisconnectCauseOnDndRejection;
            }
            set
            {
                if ((_DisconnectCauseOnDndRejection != value))
                {
                    this._DisconnectCauseOnDndRejection = value;
                    this.SendPropertyChanged("DisconnectCauseOnDndRejection");
                }
            }
        }

        [XmlIgnore()]
        public bool LogRtp
        {
            get
            {
                return this._LogRtp;
            }
            set
            {
                if ((_LogRtp != value))
                {
                    this._LogRtp = value;
                    this.SendPropertyChanged("LogRtp");
                }
            }
        }

        [XmlIgnore()]
        public bool OnlyAcceptEmbeddedSoftPhoneRegistration
        {
            get
            {
                return this._OnlyAcceptEmbeddedSoftPhoneRegistration;
            }
            set
            {
                if ((_OnlyAcceptEmbeddedSoftPhoneRegistration != value))
                {
                    this._OnlyAcceptEmbeddedSoftPhoneRegistration = value;
                    this.SendPropertyChanged("OnlyAcceptEmbeddedSoftPhoneRegistration");
                }
            }
        }

        [XmlIgnore()]
        public bool QueueTransferIfNoOnlineAccount
        {
            get
            {
                return this._QueueTransferIfNoOnlineAccount;
            }
            set
            {
                if ((_QueueTransferIfNoOnlineAccount != value))
                {
                    this._QueueTransferIfNoOnlineAccount = value;
                    this.SendPropertyChanged("QueueTransferIfNoOnlineAccount");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(string propertyName)
        {
            if ((PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Serializable()]
    [XmlType(TypeName = "ConfigTimeout", Namespace = ConfigUtility.SchemaNamespace)]
    public partial class ConfigTimeout : INotifyPropertyChanged
    {

        [XmlAttribute(AttributeName = "DialogStatus")]
        public DialogStatus _DialogStatus;

        public const string DialogStatusProperty = "DialogStatus";

        [XmlAttribute(AttributeName = "Value")]
        public int _Value;

        public const string ValueProperty = "Value";

        [XmlIgnore()]
        public DialogStatus DialogStatus
        {
            get
            {
                return this._DialogStatus;
            }
            set
            {
                if ((_DialogStatus != value))
                {
                    this._DialogStatus = value;
                    this.SendPropertyChanged("DialogStatus");
                }
            }
        }

        [XmlIgnore()]
        public int Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((_Value != value))
                {
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(string propertyName)
        {
            if ((PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Serializable()]
    [XmlType(TypeName = "ConfigDial", Namespace = ConfigUtility.SchemaNamespace)]
    public partial class ConfigDial : INotifyPropertyChanged
    {

        [XmlAttribute(AttributeName = "DialInterval")]
        public int _DialInterval = 1000;

        public const string DialIntervalProperty = "DialInterval";

        [XmlAttribute(AttributeName = "DialTimeout")]
        public int _DialTimeout = 60;

        public const string DialTimeoutProperty = "DialTimeout";

        [XmlAttribute(AttributeName = "MaxFinishTime")]
        public string _MaxFinishTime = "22:00:00";

        public const string MaxFinishTimeProperty = "MaxFinishTime";

        [XmlAttribute(AttributeName = "MinStartTime")]
        public string _MinStartTime = "07:00:00";

        public const string MinStartTimeProperty = "MinStartTime";

        [XmlAttribute(AttributeName = "RetryDelay")]
        public int _RetryDelay = 30;

        public const string RetryDelayProperty = "RetryDelay";

        [XmlAttribute(AttributeName = "SystemCallerID")]
        public string _SystemCallerID;

        public const string SystemCallerIDProperty = "SystemCallerID";

        [XmlIgnore()]
        public int DialInterval
        {
            get
            {
                return this._DialInterval;
            }
            set
            {
                if ((_DialInterval != value))
                {
                    this._DialInterval = value;
                    this.SendPropertyChanged("DialInterval");
                }
            }
        }

        [XmlIgnore()]
        public int DialTimeout
        {
            get
            {
                return this._DialTimeout;
            }
            set
            {
                if ((_DialTimeout != value))
                {
                    this._DialTimeout = value;
                    this.SendPropertyChanged("DialTimeout");
                }
            }
        }

        [XmlIgnore()]
        public string MaxFinishTime
        {
            get
            {
                return this._MaxFinishTime;
            }
            set
            {
                if ((_MaxFinishTime != value))
                {
                    this._MaxFinishTime = value;
                    this.SendPropertyChanged("MaxFinishTime");
                }
            }
        }

        [XmlIgnore()]
        public string MinStartTime
        {
            get
            {
                return this._MinStartTime;
            }
            set
            {
                if ((_MinStartTime != value))
                {
                    this._MinStartTime = value;
                    this.SendPropertyChanged("MinStartTime");
                }
            }
        }

        [XmlIgnore()]
        public int RetryDelay
        {
            get
            {
                return this._RetryDelay;
            }
            set
            {
                if ((_RetryDelay != value))
                {
                    this._RetryDelay = value;
                    this.SendPropertyChanged("RetryDelay");
                }
            }
        }

        [XmlIgnore()]
        public string SystemCallerID
        {
            get
            {
                return this._SystemCallerID;
            }
            set
            {
                if ((_SystemCallerID != value))
                {
                    this._SystemCallerID = value;
                    this.SendPropertyChanged("SystemCallerID");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(string propertyName)
        {
            if ((PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Serializable()]
    [XmlType(TypeName = "ConfigGsmModem", Namespace = ConfigUtility.SchemaNamespace)]
    public partial class ConfigGsmModem : INotifyPropertyChanged
    {

        [XmlAttribute(AttributeName = "Port")]
        public string _Port = "COM1";

        public const string PortProperty = "Port";

        [XmlAttribute(AttributeName = "SimPin")]
        public string _SimPin;

        public const string SimPinProperty = "SimPin";

        [XmlIgnore()]
        public string Port
        {
            get
            {
                return this._Port;
            }
            set
            {
                if ((_Port != value))
                {
                    this._Port = value;
                    this.SendPropertyChanged("Port");
                }
            }
        }

        [XmlIgnore()]
        public string SimPin
        {
            get
            {
                return this._SimPin;
            }
            set
            {
                if ((_SimPin != value))
                {
                    this._SimPin = value;
                    this.SendPropertyChanged("SimPin");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(string propertyName)
        {
            if ((PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
