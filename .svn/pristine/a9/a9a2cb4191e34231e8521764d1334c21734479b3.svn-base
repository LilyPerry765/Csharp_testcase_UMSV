//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright 2013, Mina Corporation, Version 1.5
namespace Plugin.Mailbox {
    using System;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    public partial class ConfigUtility {
        
        public const string SchemaNamespace = "http://tempuri.org/Config.xsd";
        
        public static string Serialize<T>(object o, bool indented)
         {
            System.IO.StringWriter writer = new System.IO.StringWriter();
            XmlTextWriter xmlWriter = new XmlTextWriter(writer);
            if (indented) {
                xmlWriter.Formatting = Formatting.Indented;
            }
            else {
                xmlWriter.Formatting = Formatting.None;
            }
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            serializer.Serialize(xmlWriter, o);
            return writer.ToString();
        }
        
        public static T Deserialize<T>(string objectXml)
         {
            System.IO.StringReader reader = new System.IO.StringReader(objectXml);
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            T classObject = ((T)(serializer.Deserialize(reader)));
            reader.Close();
            return classObject;
        }
        
        public static T DeserializeFile<T>(string path)
         {
            string xml = System.IO.File.ReadAllText(path);
            return ConfigUtility.Deserialize<T>(xml);
        }
    }
    
    [Serializable()]
    [XmlRoot(ElementName="Config", Namespace=ConfigUtility.SchemaNamespace, IsNullable=false)]
    public partial class Config : INotifyPropertyChanged {
        
        [XmlElement(ElementName="Email")]
        public ConfigEmail _Email;
        
        public const string EmailProperty = "Email";
        
        [XmlAttribute(AttributeName="MaxNewMessage")]
        public int _MaxNewMessage = 10;
        
        public const string MaxNewMessageProperty = "MaxNewMessage";
        
        [XmlAttribute(AttributeName="AnswerExpireMinutes")]
        public int _AnswerExpireMinutes = 2880;
        
        public const string AnswerExpireMinutesProperty = "AnswerExpireMinutes";
        
        [XmlAttribute(AttributeName="MaxArchiveMessage")]
        public int _MaxArchiveMessage = 10;
        
        public const string MaxArchiveMessageProperty = "MaxArchiveMessage";
        
        [XmlAttribute(AttributeName="InvalidBoxMaxTry")]
        public int _InvalidBoxMaxTry = 3;
        
        public const string InvalidBoxMaxTryProperty = "InvalidBoxMaxTry";
        
        [XmlAttribute(AttributeName="AutoDequeueFullMailbox")]
        public bool _AutoDequeueFullMailbox = false;
        
        public const string AutoDequeueFullMailboxProperty = "AutoDequeueFullMailbox";
        
        [XmlAttribute(AttributeName="MaxRecordTime")]
        public int _MaxRecordTime = 180;
        
        public const string MaxRecordTimeProperty = "MaxRecordTime";
        
        [XmlAttribute(AttributeName="PagingRetryDelay")]
        public int _PagingRetryDelay = 1800000;
        
        public const string PagingRetryDelayProperty = "PagingRetryDelay";
        
        [XmlAttribute(AttributeName="RemoveBeepFromRecordedMessage")]
        public int _RemoveBeepFromRecordedMessage = 0;
        
        public const string RemoveBeepFromRecordedMessageProperty = "RemoveBeepFromRecordedMessage";
        
        [XmlAttribute(AttributeName="MessageMinDuration")]
        public int _MessageMinDuration = 3;
        
        public const string MessageMinDurationProperty = "MessageMinDuration";
        
        [XmlAttribute(AttributeName="MailBoxWelcomeMessage")]
        public string _MailBoxWelcomeMessage = "MailBoxWelcomeMessage";
        
        public const string MailBoxWelcomeMessageProperty = "MailBoxWelcomeMessage";
        
        [XmlAttribute(AttributeName="PlaySendTimeWithMessage")]
        public bool _PlaySendTimeWithMessage = false;
        
        public const string PlaySendTimeWithMessageProperty = "PlaySendTimeWithMessage";
        
        [XmlAttribute(AttributeName="PlayCallerIDWithMessage")]
        public bool _PlayCallerIDWithMessage = false;
        
        public const string PlayCallerIDWithMessageProperty = "PlayCallerIDWithMessage";
        
        [XmlAttribute(AttributeName="MailboxDefaultMode")]
        public byte _MailboxDefaultMode = 1;
        
        public const string MailboxDefaultModeProperty = "MailboxDefaultMode";
        
        [XmlIgnore()]
        public ConfigEmail Email {
            get {
                if ((_Email == null)) {
                    _Email = new ConfigEmail();
                }
                return _Email;
            }
            set {
                if ((_Email != value)) {
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                }
            }
        }
        
        [XmlIgnore()]
        public int MaxNewMessage {
            get {
                return this._MaxNewMessage;
            }
            set {
                if ((_MaxNewMessage != value)) {
                    this._MaxNewMessage = value;
                    this.SendPropertyChanged("MaxNewMessage");
                }
            }
        }
        
        [XmlIgnore()]
        public int AnswerExpireMinutes {
            get {
                return this._AnswerExpireMinutes;
            }
            set {
                if ((_AnswerExpireMinutes != value)) {
                    this._AnswerExpireMinutes = value;
                    this.SendPropertyChanged("AnswerExpireMinutes");
                }
            }
        }
        
        [XmlIgnore()]
        public int MaxArchiveMessage {
            get {
                return this._MaxArchiveMessage;
            }
            set {
                if ((_MaxArchiveMessage != value)) {
                    this._MaxArchiveMessage = value;
                    this.SendPropertyChanged("MaxArchiveMessage");
                }
            }
        }
        
        [XmlIgnore()]
        public int InvalidBoxMaxTry {
            get {
                return this._InvalidBoxMaxTry;
            }
            set {
                if ((_InvalidBoxMaxTry != value)) {
                    this._InvalidBoxMaxTry = value;
                    this.SendPropertyChanged("InvalidBoxMaxTry");
                }
            }
        }
        
        [XmlIgnore()]
        public bool AutoDequeueFullMailbox {
            get {
                return this._AutoDequeueFullMailbox;
            }
            set {
                if ((_AutoDequeueFullMailbox != value)) {
                    this._AutoDequeueFullMailbox = value;
                    this.SendPropertyChanged("AutoDequeueFullMailbox");
                }
            }
        }
        
        [XmlIgnore()]
        public int MaxRecordTime {
            get {
                return this._MaxRecordTime;
            }
            set {
                if ((_MaxRecordTime != value)) {
                    this._MaxRecordTime = value;
                    this.SendPropertyChanged("MaxRecordTime");
                }
            }
        }
        
        [XmlIgnore()]
        public int PagingRetryDelay {
            get {
                return this._PagingRetryDelay;
            }
            set {
                if ((_PagingRetryDelay != value)) {
                    this._PagingRetryDelay = value;
                    this.SendPropertyChanged("PagingRetryDelay");
                }
            }
        }
        
        [XmlIgnore()]
        public int RemoveBeepFromRecordedMessage {
            get {
                return this._RemoveBeepFromRecordedMessage;
            }
            set {
                if ((_RemoveBeepFromRecordedMessage != value)) {
                    this._RemoveBeepFromRecordedMessage = value;
                    this.SendPropertyChanged("RemoveBeepFromRecordedMessage");
                }
            }
        }
        
        [XmlIgnore()]
        public int MessageMinDuration {
            get {
                return this._MessageMinDuration;
            }
            set {
                if ((_MessageMinDuration != value)) {
                    this._MessageMinDuration = value;
                    this.SendPropertyChanged("MessageMinDuration");
                }
            }
        }
        
        [XmlIgnore()]
        public string MailBoxWelcomeMessage {
            get {
                return this._MailBoxWelcomeMessage;
            }
            set {
                if ((_MailBoxWelcomeMessage != value)) {
                    this._MailBoxWelcomeMessage = value;
                    this.SendPropertyChanged("MailBoxWelcomeMessage");
                }
            }
        }
        
        [XmlIgnore()]
        public bool PlaySendTimeWithMessage {
            get {
                return this._PlaySendTimeWithMessage;
            }
            set {
                if ((_PlaySendTimeWithMessage != value)) {
                    this._PlaySendTimeWithMessage = value;
                    this.SendPropertyChanged("PlaySendTimeWithMessage");
                }
            }
        }
        
        [XmlIgnore()]
        public bool PlayCallerIDWithMessage {
            get {
                return this._PlayCallerIDWithMessage;
            }
            set {
                if ((_PlayCallerIDWithMessage != value)) {
                    this._PlayCallerIDWithMessage = value;
                    this.SendPropertyChanged("PlayCallerIDWithMessage");
                }
            }
        }
        
        [XmlIgnore()]
        public byte MailboxDefaultMode {
            get {
                return this._MailboxDefaultMode;
            }
            set {
                if ((_MailboxDefaultMode != value)) {
                    this._MailboxDefaultMode = value;
                    this.SendPropertyChanged("MailboxDefaultMode");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanged(string propertyName) {
            if ((PropertyChanged != null)) {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [Serializable()]
    [XmlType(TypeName="ConfigEmail", Namespace=ConfigUtility.SchemaNamespace)]
    public partial class ConfigEmail : INotifyPropertyChanged {
        
        [XmlAttribute(AttributeName="Sender")]
        public string _Sender;
        
        public const string SenderProperty = "Sender";
        
        [XmlAttribute(AttributeName="Subject")]
        public string _Subject;
        
        public const string SubjectProperty = "Subject";
        
        [XmlAttribute(AttributeName="BodyFormat")]
        public string _BodyFormat;
        
        public const string BodyFormatProperty = "BodyFormat";
        
        [XmlAttribute(AttributeName="AttachVoiceMessage")]
        public bool _AttachVoiceMessage = false;
        
        public const string AttachVoiceMessageProperty = "AttachVoiceMessage";
        
        [XmlAttribute(AttributeName="Authenticate")]
        public bool _Authenticate = false;
        
        public const string AuthenticateProperty = "Authenticate";
        
        [XmlAttribute(AttributeName="UseSsl")]
        public bool _UseSsl = false;
        
        public const string UseSslProperty = "UseSsl";
        
        [XmlAttribute(AttributeName="Username")]
        public string _Username;
        
        public const string UsernameProperty = "Username";
        
        [XmlAttribute(AttributeName="Password")]
        public string _Password;
        
        public const string PasswordProperty = "Password";
        
        [XmlAttribute(AttributeName="Server")]
        public string _Server = "localhost";
        
        public const string ServerProperty = "Server";
        
        [XmlAttribute(AttributeName="Port")]
        public int _Port = 25;
        
        public const string PortProperty = "Port";
        
        [XmlAttribute(AttributeName="Timeout")]
        public int _Timeout = 60;
        
        public const string TimeoutProperty = "Timeout";
        
        [XmlIgnore()]
        public string Sender {
            get {
                return this._Sender;
            }
            set {
                if ((_Sender != value)) {
                    this._Sender = value;
                    this.SendPropertyChanged("Sender");
                }
            }
        }
        
        [XmlIgnore()]
        public string Subject {
            get {
                return this._Subject;
            }
            set {
                if ((_Subject != value)) {
                    this._Subject = value;
                    this.SendPropertyChanged("Subject");
                }
            }
        }
        
        [XmlIgnore()]
        public string BodyFormat {
            get {
                return this._BodyFormat;
            }
            set {
                if ((_BodyFormat != value)) {
                    this._BodyFormat = value;
                    this.SendPropertyChanged("BodyFormat");
                }
            }
        }
        
        [XmlIgnore()]
        public bool AttachVoiceMessage {
            get {
                return this._AttachVoiceMessage;
            }
            set {
                if ((_AttachVoiceMessage != value)) {
                    this._AttachVoiceMessage = value;
                    this.SendPropertyChanged("AttachVoiceMessage");
                }
            }
        }
        
        [XmlIgnore()]
        public bool Authenticate {
            get {
                return this._Authenticate;
            }
            set {
                if ((_Authenticate != value)) {
                    this._Authenticate = value;
                    this.SendPropertyChanged("Authenticate");
                }
            }
        }
        
        [XmlIgnore()]
        public bool UseSsl {
            get {
                return this._UseSsl;
            }
            set {
                if ((_UseSsl != value)) {
                    this._UseSsl = value;
                    this.SendPropertyChanged("UseSsl");
                }
            }
        }
        
        [XmlIgnore()]
        public string Username {
            get {
                return this._Username;
            }
            set {
                if ((_Username != value)) {
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                }
            }
        }
        
        [XmlIgnore()]
        public string Password {
            get {
                return this._Password;
            }
            set {
                if ((_Password != value)) {
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                }
            }
        }
        
        [XmlIgnore()]
        public string Server {
            get {
                return this._Server;
            }
            set {
                if ((_Server != value)) {
                    this._Server = value;
                    this.SendPropertyChanged("Server");
                }
            }
        }
        
        [XmlIgnore()]
        public int Port {
            get {
                return this._Port;
            }
            set {
                if ((_Port != value)) {
                    this._Port = value;
                    this.SendPropertyChanged("Port");
                }
            }
        }
        
        [XmlIgnore()]
        public int Timeout {
            get {
                return this._Timeout;
            }
            set {
                if ((_Timeout != value)) {
                    this._Timeout = value;
                    this.SendPropertyChanged("Timeout");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanged(string propertyName) {
            if ((PropertyChanged != null)) {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
