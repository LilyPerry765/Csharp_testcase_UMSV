using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Text.RegularExpressions;
using UMSV;
using Pendar.Ums.Model;

namespace Pendar.Ums.CompositeNodes.UserControls
{
    /// <summary>
    /// Interaction logic for MailBoxInputBox.xaml
    /// </summary>
    public partial class MailBoxInputBox : UserControl, IValidatable
    {
        UMSV.UmsDataContext db = new UMSV.UmsDataContext();

        public MailBoxInputBox()
        {
            InitializeComponent();
        }

        public string Text
        {
            get
            {
                return (string)GetValue(TextProperty);
            }
            set
            {
                SetValue(TextProperty, value);
            }
        }

        // Using a DependencyProperty as the backing store for Text.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty TextProperty =
            DependencyProperty.Register("Text", typeof(string), typeof(MailBoxInputBox), new FrameworkPropertyMetadata(new PropertyChangedCallback(OnPropertyChanged))
            {
                DefaultUpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged,
                BindsTwoWayByDefault = true
            });

        protected static void OnPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
        {
            MailBoxInputBox me = sender as MailBoxInputBox;
            if (e.Property == TextProperty)
            {
                me.boxNoTextBox.Text = (string)e.NewValue;
            }
        }

        private void boxNoTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (Text != (sender as TextBox).Text)
                Text = (sender as TextBox).Text;
        }

        private void boxNoTextBox_TextInput(object sender, TextCompositionEventArgs e)
        {
            if (!Regex.IsMatch(e.Text, @"\d+"))
                e.Handled = true;
        }

        public ValidationResult Validate()
        {
            return Validate(MailboxType.Private);
        }

        public ValidationResult Validate(MailboxType mailboxType)
        {
            if (boxNoTextBox.Text.IsNumber() && CheckMailboxExists(boxNoTextBox.Text, mailboxType))
                return ValidationResult.ValidResult;
            else
            {
                this.Focus();
                boxNoTextBox.Focus();
                return new ValidationResult(false, "شماره صندوق معتبر نيست.");
            }
        }

        private bool CheckMailboxExists(string boxNo, MailboxType mailboxType)
        {
            if (!db.Mailboxes.Any(mb => mb.BoxNo == boxNo))
            {
                if (Folder.MessageBox.ShowQuestion("صندوق پستی با شماره {0} وجود ندارد.\n اين صندوق برای شما ايجاد شود؟", boxNo) == MessageBoxResult.Yes)
                {
                    db.Mailboxes.InsertOnSubmit(new UMSV.Mailbox()
                    {
                        BoxNo = boxNo,
                        Type = (byte)mailboxType,
                        Name = "AutoGenerated",
                        FollowupCodeStart = 1000,
                        FollowupCodeEnd = 100000
                    });
                    db.SubmitChanges();
                }
                else
                    return false;
            }
            return true;
        }


    }
}
